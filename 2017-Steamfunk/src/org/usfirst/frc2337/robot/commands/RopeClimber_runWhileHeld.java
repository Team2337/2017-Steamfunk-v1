// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2337.robot.commands;

import org.usfirst.frc2337.robot.ImprovedJoystick.RumbleMode;
import org.usfirst.frc2337.robot.Robot;
import org.usfirst.frc2337.robot.RobotMap;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;

/**
 * This runs the climb motors when the assigned button is held
 */
public class RopeClimber_runWhileHeld extends Command {
	boolean isPressed = false;

	public RopeClimber_runWhileHeld() {
		requires(Robot.ropeClimber);
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		Robot.ropeClimber.startClimber();
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		if (!Robot.ropeClimber.ropeClimberFinished) {
			if (!RobotMap.ropeClimberLimit.get()) {
				if (!isPressed) { // Locks variable so that it will always be
									// true
					isPressed = true;
				} else {
					setTimeout(3);
				}
			}
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		// If limit is pressed, keep motors on for 3 more seconds
		if (Robot.ropeClimber.ropeClimberFinished) {
			return true;
		} else {
			return isTimedOut() && isPressed;
		}
	}

	// Called once after isFinished returns true
	protected void end() {
		if (!Robot.ropeClimber.ropeClimberFinished) {
			Robot.ropeClimber.ropeClimberFinished = true;
		}
		Robot.ropeClimber.stopClimber();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
